'''
可变对象：
    list,dic,set
不可变对象：相当于常量
    int,float,bool,str,tuple
'''


'''
对于简单对象，如int,float
output：
    1 传入前： 1856990560
    2 传入函数： 1856990560
    3 函数赋值： 1856990624
    4 函数返回: 1856990624
结论：
    1. 由1==2  对于不可变类型，函数通过引用传参，并非传值
    2. id改变的原因：（与函数传参无关，去掉函数id也会改变）
        在对不可变类型运算操作(或赋值常量)之后，相当于产生副本，产生新对象，
        划分一个新的空间，将变量名与新对象绑定，顾不会影响函数外变量或对象
    3. 函数返回值也通过传参，
'''

def test_immutable_for_int(n):
    print(2,"传入函数：",id(n))
    n += 2
    print(3, "函数赋值：", id(n))
    return n
'''
对于元组：
1 传入前  ： 3053883794360
2 传入函数： 3053883794360
3 修改：    3053883794360
4 函数返回： 3053883794360

与int相同，也是传引用，且对其重新赋值或切片，也是产生副本，指向新地址
但对元组内的列表操作是不会创建新副本的，也就是会影响函数外元组
'''
def test_immutable_for_tuple(n):
    print(2,"传入函数：",id(n))
    n[0].append(561)
    #n = n * 2
    print(3, "修改：", id(n))
    #n = n[0:2]
    #print(3, "切片：", id(n))
    return n

if __name__ == '__main__':
    n = ([20],30,40,50)
    print(1,"传入前  ：",id(n))

    n = test_immutable_for_tuple(n)

    print(4,"函数返回：",id(n))
